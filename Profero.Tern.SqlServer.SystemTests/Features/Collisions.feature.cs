// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18051
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Profero.Tern.SqlServer.SystemTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Collisions")]
    public partial class CollisionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Collisions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Collisions", "In order to integrate Tern with legacy systems\r\nAs a DBA\r\nI want to be able to sc" +
                    "ript steps but keep their versions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Intermediate versions cannot be added after deployment")]
        public virtual void IntermediateVersionsCannotBeAddedAfterDeployment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intermediate versions cannot be added after deployment", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have created an empty database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schema",
                        "Version",
                        "Script"});
            table1.AddRow(new string[] {
                        "default",
                        "1.0",
                        "CREATE TABLE [Test] (ID INTEGER NOT NULL)"});
            table1.AddRow(new string[] {
                        "default",
                        "1.5",
                        "ALTER TABLE [Test] ADD [Name] VARCHAR(32) NULL"});
#line 8
 testRunner.And("I have applied the version scripts", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schema",
                        "Version",
                        "Script"});
            table2.AddRow(new string[] {
                        "default",
                        "1.1",
                        "ALTER TABLE [Test] ADD [Description] VARCHAR(256) NULL"});
#line 12
 testRunner.When("I add the version scripts", ((string)(null)), table2, "When ");
#line 15
 testRunner.Then("attempting to apply the version scripts again should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And("the DatabaseVersion table should contain 2 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scripts cannot be modified after deployment")]
        public virtual void ScriptsCannotBeModifiedAfterDeployment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scripts cannot be modified after deployment", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have created an empty database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schema",
                        "Version",
                        "Script"});
            table3.AddRow(new string[] {
                        "default",
                        "1.0",
                        "CREATE TABLE [Test] (ID INTEGER NOT NULL)"});
            table3.AddRow(new string[] {
                        "default",
                        "1.1",
                        "ALTER TABLE [Test] ADD [Name] VARCHAR(32) NULL"});
#line 20
 testRunner.And("I have applied the version scripts", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Schema",
                        "Version",
                        "Script"});
            table4.AddRow(new string[] {
                        "default",
                        "1.1",
                        "ALTER TABLE [Test] ADD [Description] VARCHAR(256) NOT NULL"});
#line 24
 testRunner.When("I modify the Script", ((string)(null)), table4, "When ");
#line 27
 testRunner.Then("attempting to apply the version scripts again should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.And("the DatabaseVersion table should contain 2 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
